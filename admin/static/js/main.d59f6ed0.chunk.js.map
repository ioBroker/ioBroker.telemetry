{"version":3,"sources":["Tabs/Options.js","Tabs/Objects.js","Tabs/Debounces.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","theme","tab","width","minHeight","column","display","verticalAlign","marginRight","columnSettings","selectControl","paddingBottom","props","className","classes","instance","common","native","onError","text","onLoad","clsx","TextField","value","url","onChange","e","target","label","I18n","t","helperText","sendIntervalSec","columns","title","field","subField","editable","subStyle","opacity","type","Objects","Component","constructor","super","onAliveChanged","id","state","this","setState","alive","val","onUpdatesDetected","timer","clearTimeout","setTimeout","browse","propertyName","showHint","toast","telemetryObjects","socket","getState","adapterName","then","newState","sendTo","result","error","componentDidMount","subscribeState","componentWillUnmount","unsubscribeState","renderToast","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","ContentProps","message","action","IconButton","aria-label","color","close","onClick","renderHint","render","lang","getLanguage","data","Object","keys","map","object","name","Utils","getObjectNameFromObj","role","debounce","ignore","lastEvent","moment","format","eventsInHour","length","noAdd","glowOnChange","onUpdate","newData","getObject","obj","a","namespace","custom","enabled","setObject","_id","maxWidth","roles","fullWidth","App","GenericApp","extendedProps","translations","require","doNotLoadAllObjects","getSelectedTab","selectedTab","loaded","style","background","themeType","AppBar","position","Tabs","index","selectTab","parentNode","dataset","Tab","data-name","isIFrame","tabContentIFrame","tabContent","errorText","attr","cb","updateNativeValue","renderError","renderSaveCloseButtons","root","padding","height","overflow","Boolean","window","location","hostname","match","themeName","getThemeName","console","log","version","host","build","ReactDOM","onThemeChange","_theme","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d59f6ed0.chunk.js","sourcesContent":["import React from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport Logo from '@iobroker/adapter-react/Components/Logo';\r\n\r\nconst styles = theme => ({\r\n    tab: {\r\n        width: '100%',\r\n        minHeight: '100%'\r\n    },\r\n    column: {\r\n        display: 'inline-block',\r\n        verticalAlign: 'top',\r\n        marginRight: 20\r\n    },\r\n    columnSettings: {\r\n        width: 'calc(100% - 370px)',\r\n    },\r\n    selectControl: {\r\n        width: 200,\r\n        paddingBottom: 20,\r\n    }\r\n});\r\n\r\nconst Options = (props) => {\r\n    return <form className={props.classes.tab}>\r\n        <Logo\r\n            instance={ props.instance }\r\n            common={ props.common }\r\n            native={ props.native }\r\n            onError={ text => {}/*setState({errorText: text})*/ }\r\n            onLoad={ props.onLoad }\r\n        />\r\n        <div className={clsx(props.classes.column, props.classes.columnSettings)}>\r\n            <TextField\r\n                value={props.native.url}\r\n                onChange={e => props.onChange('url', e.target.value)}\r\n                label={I18n.t('URL Server')}\r\n                helperText={I18n.t('Server')}\r\n            />\r\n            <br/>\r\n            <TextField\r\n                value={props.native.sendIntervalSec}\r\n                onChange={e => props.onChange('sendIntervalSec', e.target.value)}\r\n                label={I18n.t('Send interval')}\r\n                helperText={I18n.t('seconds')}\r\n            />\r\n        </div>\r\n    </form>;\r\n}\r\n\r\nOptions.propTypes = {\r\n    common: PropTypes.object.isRequired,\r\n    native: PropTypes.object.isRequired,\r\n    instance: PropTypes.number.isRequired,\r\n    adapterName: PropTypes.string.isRequired,\r\n    onError: PropTypes.func,\r\n    onLoad: PropTypes.func,\r\n    onChange: PropTypes.func,\r\n    socket: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Options);\r\n","import React, {Component} from 'react';\r\nimport moment from 'moment';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport {MdClose as IconClose} from 'react-icons/md';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport Message from '@iobroker/adapter-react/Dialogs/Message';\r\n\r\nimport TreeTable from '@iobroker/adapter-react/Components/TreeTable';\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\n\r\nconst styles = theme => ({\r\n});\r\n\r\nconst columns = [\r\n    {\r\n        title: I18n.t('Name'),\r\n        field: 'name',\r\n        subField: 'id',\r\n        editable: false,\r\n        subStyle: {\r\n            opacity: 0.5\r\n        }\r\n    },\r\n    /*{\r\n        title: I18n.t('Name'),\r\n        field: 'name',\r\n        editable: false\r\n    },*/\r\n    {\r\n        title: I18n.t('Type'),\r\n        field: 'type',\r\n        editable: false\r\n    },\r\n    {\r\n        title: I18n.t('Debounce'),\r\n        field: 'debounce'\r\n    },\r\n    {\r\n        title: I18n.t('Ignore'),\r\n        field: 'ignore',\r\n        type: 'boolean'\r\n    },\r\n    {\r\n        title: I18n.t('Last event'),\r\n        field: 'lastEvent',\r\n        editable: false\r\n    },\r\n    {\r\n        title: I18n.t('Events in hour'),\r\n        field: 'eventsInHour',\r\n        editable: false\r\n    },\r\n];\r\n\r\nclass Objects extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.propertyName = 'resources';\r\n\r\n        this.state = {\r\n            showHint: false,\r\n            toast: '',\r\n            alive: false,\r\n            telemetryObjects: [],\r\n        };\r\n\r\n        this.props.socket.getState(`system.adapter.${this.props.adapterName}.${this.props.instance}.alive`)\r\n            .then(state => {\r\n                const newState = {alive: state && state.val};\r\n                if (newState.alive) {\r\n                    this.browse();\r\n                } else {\r\n                    this.setState(newState);\r\n                }\r\n            });\r\n    }\r\n\r\n    browse() {\r\n        return this.props.socket.sendTo(this.props.adapterName + '.' + this.props.instance, 'browse', null)\r\n            .then(result => {\r\n                if (result.result) {\r\n                    this.setState({telemetryObjects: result.result});\r\n                } else {\r\n                    this.setState({toast: I18n.t('Cannot get list:') + (result.error || 'see ioBroker log')});\r\n                }\r\n            });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.socket.subscribeState(`system.adapter.${this.props.adapterName}.${this.props.instance}.alive`, this.onAliveChanged);\r\n        this.props.socket.subscribeState(`${this.props.adapterName}.${this.props.instance}.data.update`, this.onUpdatesDetected);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.socket.unsubscribeState(`system.adapter.${this.props.adapterName}.${this.props.instance}.alive`, this.onAliveChanged);\r\n        this.props.socket.unsubscribeState(`${this.props.adapterName}.${this.props.instance}.data.update`, this.onUpdatesDetected);\r\n    }\r\n\r\n    onAliveChanged = (id, state) => {\r\n        this.setState({alive: state ? !!state.val : false});\r\n    }\r\n\r\n    onUpdatesDetected = () => {\r\n        this.timer && clearTimeout(this.timer)\r\n        this.timer = setTimeout(() => {\r\n            this.timer = null;\r\n            this.browse();\r\n        }, 500);\r\n    }\r\n\r\n    renderToast() {\r\n        if (!this.state.toast) return null;\r\n        return (\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                open={true}\r\n                autoHideDuration={6000}\r\n                onClose={() => this.setState({toast: ''})}\r\n                ContentProps={{\r\n                    'aria-describedby': 'message-id',\r\n                }}\r\n                message={<span id=\"message-id\">{this.state.toast}</span>}\r\n                action={[\r\n                    <IconButton\r\n                        key=\"close\"\r\n                        aria-label=\"Close\"\r\n                        color=\"inherit\"\r\n                        className={this.props.classes.close}\r\n                        onClick={() => this.setState({toast: ''})}\r\n                    >\r\n                        <IconClose />\r\n                    </IconButton>,\r\n                ]}\r\n            />);\r\n    }\r\n\r\n    renderHint() {\r\n        if (this.state.showHint) {\r\n            return <Message text={I18n.t('Click now Get new connection certificates to request new temporary password')} onClose={() => this.setState({showHint: false})}/>;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.alive) {\r\n            return <p>{I18n.t('Please start the instance first!')}</p>;\r\n        }\r\n        const lang = I18n.getLanguage();\r\n\r\n        const data = Object.keys(this.state.telemetryObjects).map(id => {\r\n            const object = this.state.telemetryObjects[id];\r\n            return {\r\n                id,\r\n                name: Utils.getObjectNameFromObj({common: {name: object.name}}, lang),\r\n                type: object.role,\r\n                debounce: object.debounce || 0,\r\n                ignore: object.ignore,\r\n                lastEvent: object.lastEvent ? moment(object.lastEvent).format('YYYY-MM-DD HH:mm:ss') : null,\r\n                eventsInHour: object.eventsInHour ? object.eventsInHour.length : null,\r\n            }\r\n        });\r\n        return <TreeTable\r\n            noAdd={true}\r\n            data={data}\r\n            columns={columns}\r\n            glowOnChange={true}\r\n            onUpdate={newData => {\r\n                this.props.socket.getObject(newData.id)\r\n                    .then(async obj => {\r\n                        const namespace = this.props.adapterName + '.' + this.props.instance;\r\n                        obj.common.custom = obj.common.custom || {};\r\n                        obj.common.custom[namespace] = obj.common.custom[namespace] || {};\r\n                        obj.common.custom[namespace].enabled = true;\r\n                        obj.common.custom[namespace].ignore = newData.ignore;\r\n                        obj.common.custom[namespace].debounce = newData.debounce;\r\n                        if (!newData.ignore && !newData.debounce) {\r\n                            obj.common.custom[namespace] = null;\r\n                        }\r\n                        await this.props.socket.setObject(obj._id, obj);\r\n                    });\r\n            }}\r\n        />;\r\n    }\r\n}\r\n\r\nObjects.propTypes = {\r\n    common: PropTypes.object.isRequired,\r\n    native: PropTypes.object.isRequired,\r\n    instance: PropTypes.number.isRequired,\r\n    theme: PropTypes.object.isRequired,\r\n    themeType: PropTypes.string,\r\n    adapterName: PropTypes.string.isRequired,\r\n    onError: PropTypes.func,\r\n    socket: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(Objects);\r\n","import React from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport Logo from '@iobroker/adapter-react/Components/Logo';\r\n\r\nconst styles = theme => ({\r\n    tab: {\r\n        width: '100%',\r\n        minHeight: '100%'\r\n    },\r\n    column: {\r\n        display: 'inline-block',\r\n        verticalAlign: 'top',\r\n        marginRight: 20\r\n    },\r\n    columnSettings: {\r\n        width: '100%',\r\n        maxWidth: 400,\r\n    },\r\n    selectControl: {\r\n        width: 400,\r\n        paddingBottom: 20,\r\n    }\r\n});\r\n\r\nconst Debounces = props => {\r\n    return <form className={props.classes.tab}>\r\n        {props.roles.map(role =>\r\n            <div key={role} className={clsx(props.classes.column, props.classes.columnSettings)}>\r\n                <TextField\r\n                    fullWidth={true}\r\n                    value={props.native[role + '_debounce']}\r\n                    type=\"number\"\r\n                    helperText={I18n.t('ms')}\r\n                    onChange={e => props.onChange(role + '_debounce', e.target.value)}\r\n                    label={role}\r\n                />\r\n            </div>\r\n        )}\r\n    </form>;\r\n}\r\n\r\nDebounces.propTypes = {\r\n    common: PropTypes.object.isRequired,\r\n    native: PropTypes.object.isRequired,\r\n    instance: PropTypes.number.isRequired,\r\n    adapterName: PropTypes.string.isRequired,\r\n    onError: PropTypes.func,\r\n    onLoad: PropTypes.func,\r\n    onChange: PropTypes.func,\r\n    socket: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Debounces);\r\n","import React from 'react';\r\nimport {MuiThemeProvider, withStyles} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport GenericApp from '@iobroker/adapter-react/GenericApp';\r\nimport Loader from '@iobroker/adapter-react/Components/Loader'\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport TabOptions from './Tabs/Options';\r\nimport TabObjects from './Tabs/Objects';\r\nimport TabDebounces from './Tabs/Debounces';\r\n\r\nconst styles = theme => ({\r\n    root: {},\r\n    tabContent: {\r\n        padding: 10,\r\n        height: 'calc(100% - 64px - 48px - 20px)',\r\n        overflow: 'auto'\r\n    },\r\n    tabContentIFrame: {\r\n        padding: 10,\r\n        height: 'calc(100% - 64px - 48px - 20px - 38px)',\r\n        overflow: 'auto'\r\n    }\r\n});\r\n\r\nconst roles = [\r\n    'sensor.motion',\r\n    'sensor.rain',\r\n    'sensor.lock',\r\n    'button.*',\r\n    'value.window',\r\n    'value.temperature',\r\n    'level.temperature',\r\n    'value.humidity',\r\n    'value.blood.sugar',\r\n    'level.co2',\r\n    'value.health.*'\r\n];\r\n\r\nclass App extends GenericApp {\r\n    constructor(props) {\r\n        const extendedProps = {};\r\n        extendedProps.translations = {\r\n            'en': require('./i18n/en'),\r\n            'de': require('./i18n/de'),\r\n            'ru': require('./i18n/ru'),\r\n            'pt': require('./i18n/pt'),\r\n            'nl': require('./i18n/nl'),\r\n            'fr': require('./i18n/fr'),\r\n            'it': require('./i18n/it'),\r\n            'es': require('./i18n/es'),\r\n            'pl': require('./i18n/pl'),\r\n            'zh-cn': require('./i18n/zh-cn'),\r\n        };\r\n        extendedProps.doNotLoadAllObjects = true;\r\n        extendedProps.adapterName = 'telemetry';\r\n\r\n        super(props, extendedProps);\r\n    }\r\n\r\n    getSelectedTab() {\r\n        const tab = this.state.selectedTab;\r\n        if (!tab || tab === 'undefined' || tab === 'options') {\r\n            return 0;\r\n        } else\r\n        if (tab === 'objects') {\r\n            return 1;\r\n        } else\r\n        if (tab === 'debounces') {\r\n            return 2;\r\n        }\r\n    }\r\n\r\n    /*async onPrepareLoad(adapterSettings) {\r\n        let settings = await this.socket.getObject('telemetry.0.settings');\r\n\r\n        let telemetryObjects = {};\r\n        if (settings) {\r\n            for (let i in settings.native.telemetryObjects) {\r\n                let _id = settings.native.telemetryObjects[i];\r\n                telemetryObjects[_id] = await this.socket.getObject(_id);\r\n            }\r\n        }\r\n        this.setState({telemetryObjects});\r\n    }\r\n\r\n    onPrepareSave() {\r\n        Object.keys(this.state.telemetryObjects).forEach(_id =>\r\n            this.socket.setObject(_id, this.state.telemetryObjects[_id])\r\n        );\r\n\r\n    updateTelemetryObject = (data) => {\r\n        let newObjects = JSON.parse(JSON.stringify(this.state.telemetryObjects));\r\n        newObjects[data.id].common.custom['telemetry.0'].ignore = data.ignore;\r\n        newObjects[data.id].common.custom['telemetry.0'].debounce = data.debounce;\r\n        this.setState({telemetryObjects: newObjects, changed: true});\r\n    }*/\r\n\r\n    render() {\r\n        if (!this.state.loaded) {\r\n            return <MuiThemeProvider theme={this.state.theme}>\r\n                <Loader theme={this.state.themeType}/>\r\n            </MuiThemeProvider>;\r\n        }\r\n\r\n        return <MuiThemeProvider theme={this.state.theme}>\r\n            <div className=\"App\" style={{background: this.state.themeType === 'dark' ? '#000' : '#FFF'}}>\r\n                <AppBar position=\"static\">\r\n\r\n                    <Tabs value={this.getSelectedTab()} onChange={(e, index) => this.selectTab(e.target.parentNode.dataset.name, index)}>\r\n                        <Tab label={I18n.t('Options')}    data-name=\"options\" />\r\n                        <Tab label={I18n.t('Objects')}    data-name=\"objects\" />\r\n                        <Tab label={I18n.t('De-bounces')} data-name=\"debounces\" />\r\n                        {/*this.state.selectedTab === 'objects' ? <IconButton onClick={() => this.onPrepareLoad(this.state.native)}>\r\n                            <RefreshIcon htmlColor=\"white\"/>\r\n                        </IconButton> : null*/}\r\n                    </Tabs>\r\n                </AppBar>\r\n\r\n                <div className={this.isIFrame ? this.props.classes.tabContentIFrame : this.props.classes.tabContent}>\r\n                    {(this.state.selectedTab === 'options' || !this.state.selectedTab) && (<TabOptions\r\n                        key=\"options\"\r\n                        common={this.common}\r\n                        socket={this.socket}\r\n                        native={this.state.native}\r\n                        theme={this.state.themeType}\r\n                        onError={text => this.setState({errorText: text})}\r\n                        instance={this.instance}\r\n                        adapterName={this.adapterName}\r\n                        onChange={(attr, value, cb) => this.updateNativeValue(attr, value, cb)}\r\n                    />)}\r\n                    {this.state.selectedTab === 'objects' && <TabObjects\r\n                        key=\"objects\"\r\n                        common={this.common}\r\n                        native={this.state.native}\r\n                        socket={this.socket}\r\n                        themeType={this.state.themeType}\r\n                        theme={this.state.theme}\r\n                        onError={text => this.setState({errorText: text})}\r\n                        instance={this.instance}\r\n                        adapterName={this.adapterName}\r\n                    />}\r\n                    {this.state.selectedTab === 'debounces' && <TabDebounces\r\n                        key=\"options\"\r\n                        common={this.common}\r\n                        socket={this.socket}\r\n                        native={this.state.native}\r\n                        theme={this.state.themeType}\r\n                        onError={text => this.setState({errorText: text})}\r\n                        instance={this.instance}\r\n                        adapterName={this.adapterName}\r\n                        onChange={(attr, value, cb) => this.updateNativeValue(attr, value, cb)}\r\n                        roles={roles}\r\n                    />}\r\n                </div>\r\n                {this.renderError()}\r\n                {this.renderSaveCloseButtons()}\r\n            </div>\r\n        </MuiThemeProvider>;\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as Sentry from '@sentry/browser';\r\nimport * as SentryIntegrations from '@sentry/integrations';\r\nimport { MuiThemeProvider} from '@material-ui/core/styles';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {version} from '../package.json';\r\nimport theme from '@iobroker/adapter-react/Theme';\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\n\r\nwindow.adapterName = 'consumption';\r\nlet themeName = Utils.getThemeName();\r\n\r\nconsole.log('iobroker.' + window.adapterName + '@' + version + ' using theme \"' + themeName + '\"');\r\n\r\nfunction build() {\r\n    return ReactDOM.render(\r\n        <MuiThemeProvider theme={theme(themeName)}>\r\n            <App common={{}}\r\n                onThemeChange={_theme => {\r\n                    themeName = _theme;\r\n                    build();\r\n                }}\r\n            />\r\n        </MuiThemeProvider>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\nif (window.location.host !== 'localhost:3000' && false) {\r\n    Sentry.init({\r\n        dsn: 'https://5ad729dbed504d15aa8bde423cae9a8e@sentry.iobroker.net/57',\r\n        release: 'iobroker.' + window.adapterName + '@' + version,\r\n        integrations: [\r\n            new SentryIntegrations.Dedupe()\r\n        ]\r\n    });\r\n}\r\n\r\nbuild();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}