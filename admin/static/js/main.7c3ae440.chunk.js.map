{"version":3,"sources":["Tabs/Options.js","Tabs/Objects.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","theme","tab","width","minHeight","column","display","verticalAlign","marginRight","columnSettings","selectControl","paddingBottom","props","className","classes","instance","common","native","onError","text","onLoad","clsx","TextField","value","url","onChange","e","target","label","I18n","t","helperText","roles","map","role","key","type","columns","title","field","editable","lookup","0","1","Objects","onAliveChanged","id","state","setState","alive","val","propertyName","showHint","toast","telemetryObjects","socket","getState","adapterName","then","newState","sendTo","result","error","this","subscribeState","unsubscribeState","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","ContentProps","message","action","IconButton","aria-label","color","close","onClick","data","Object","values","object","custom","_id","name","debounce","ignore","lastEvent","moment","format","eventsInHour","length","console","log","onUpdate","updateTelemetryObject","Component","App","extendedProps","translations","require","doNotLoadAllObjects","selectedTab","loaded","style","background","themeType","AppBar","position","Tabs","getSelectedTab","index","selectTab","parentNode","dataset","Tab","data-name","isIFrame","tabContentIFrame","tabContent","errorText","attr","cb","updateNativeValue","renderError","renderSaveCloseButtons","GenericApp","root","padding","height","overflow","Boolean","window","location","hostname","match","themeName","Utils","getThemeName","version","host","build","ReactDOM","render","onThemeChange","_theme","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7c3ae440.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport Logo from '@iobroker/adapter-react/Components/Logo';\r\n\r\nconst styles = theme => ({\r\n    tab: {\r\n        width: '100%',\r\n        minHeight: '100%'\r\n    },\r\n    column: {\r\n        display: 'inline-block',\r\n        verticalAlign: 'top',\r\n        marginRight: 20\r\n    },\r\n    columnSettings: {\r\n        width: 'calc(100% - 370px)',\r\n    },\r\n    selectControl: {\r\n        width: 200,\r\n        paddingBottom: 20,\r\n    }\r\n});\r\n\r\nconst Options = (props) => {\r\n    return <form className={props.classes.tab}>\r\n        <Logo\r\n            instance={ props.instance }\r\n            common={ props.common }\r\n            native={ props.native }\r\n            onError={ text => {}/*setState({errorText: text})*/ }\r\n            onLoad={ props.onLoad }\r\n        />\r\n        <div className={clsx(props.classes.column, props.classes.columnSettings)}>\r\n            <TextField\r\n                value={props.native.url}\r\n                onChange={e => props.onChange('url', e.target.value)}\r\n                label={I18n.t('URL Server')}\r\n                helperText={I18n.t('Server')}\r\n            />\r\n        </div>\r\n        <h2>{I18n.t('De-bounces')}</h2>\r\n        {props.roles.map(role =>\r\n            <div key={role} className={clsx(props.classes.column, props.classes.columnSettings)}>\r\n                <TextField\r\n                    value={props.native[role + '_debounce']}\r\n                    type=\"number\"\r\n                    onChange={e => props.onChange(role + '_debounce', e.target.value)}\r\n                    label={I18n.t(role) + ' ' + I18n.t('debounce')}\r\n                />\r\n            </div>\r\n        )}\r\n    </form>;\r\n}\r\n\r\nOptions.propTypes = {\r\n    common: PropTypes.object.isRequired,\r\n    native: PropTypes.object.isRequired,\r\n    instance: PropTypes.number.isRequired,\r\n    adapterName: PropTypes.string.isRequired,\r\n    onError: PropTypes.func,\r\n    onLoad: PropTypes.func,\r\n    onChange: PropTypes.func,\r\n    socket: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Options);\r\n","import React, {Component} from 'react';\r\nimport moment from 'moment';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport {MdClose as IconClose} from 'react-icons/md';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport Message from '@iobroker/adapter-react/Dialogs/Message';\r\n\r\nimport TreeTable from '@iobroker/adapter-react/Components/TreeTable';\r\n\r\nconst styles = theme => ({\r\n});\r\n\r\nconst columns = [\r\n    {\r\n        title: I18n.t('ID'),\r\n        field: 'id',\r\n        editable: 'never'\r\n    },\r\n    {\r\n        title: I18n.t('Name'),\r\n        field: 'name',\r\n        editable: 'never'\r\n    },\r\n    {\r\n        title: I18n.t('Type'),\r\n        field: 'type',\r\n        editable: 'never'\r\n    },\r\n    {\r\n        title: I18n.t('Debounce'),\r\n        field: 'debounce'\r\n    },\r\n    {\r\n        title: I18n.t('Ignore'),\r\n        field: 'ignore',\r\n        lookup: {\r\n            0: I18n.t('No ignore'),\r\n            1: I18n.t('Ignore'),\r\n        }\r\n    },\r\n    {\r\n        title: I18n.t('Last event'),\r\n        field: 'lastEvent',\r\n        editable: 'never'\r\n    },\r\n    {\r\n        title: I18n.t('Events in hour'),\r\n        field: 'eventsInHour',\r\n        editable: 'never'\r\n    },\r\n];\r\n\r\nclass Objects extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.propertyName = 'resources';\r\n\r\n        this.state = {\r\n            showHint: false,\r\n            toast: '',\r\n            alive: false,\r\n            telemetryObjects: [],\r\n        };\r\n\r\n        this.props.socket.getState(`system.adapter.${this.props.adapterName}.${this.props.instance}.alive`)\r\n            .then(state => {\r\n                const newState = {alive: state && state.val};\r\n                if (newState.alive) {\r\n                    this.props.socket.sendTo(this.props.adapterName + '.' + this.props.instance, 'browse', null)\r\n                        .then(result => {\r\n                            if (result.result) {\r\n                                this.setState({telemetryObjects: result.result});\r\n                            } else {\r\n                                this.setState({toast: I18n.t('Cannot get list:') + (result.error || 'see ioBroker log')});\r\n                            }\r\n                        });\r\n                } else {\r\n                    this.setState(newState);\r\n                }\r\n            });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.socket.subscribeState(`system.adapter.${this.props.adapterName}.${this.props.instance}.alive`, this.onAliveChanged);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.socket.unsubscribeState(`system.adapter.${this.props.adapterName}.${this.props.instance}.alive`, this.onAliveChanged);\r\n    }\r\n\r\n    onAliveChanged = (id, state) => {\r\n        this.setState({alive: state ? !!state.val : false});\r\n    }\r\n\r\n    renderToast() {\r\n        if (!this.state.toast) return null;\r\n        return (\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                open={true}\r\n                autoHideDuration={6000}\r\n                onClose={() => this.setState({toast: ''})}\r\n                ContentProps={{\r\n                    'aria-describedby': 'message-id',\r\n                }}\r\n                message={<span id=\"message-id\">{this.state.toast}</span>}\r\n                action={[\r\n                    <IconButton\r\n                        key=\"close\"\r\n                        aria-label=\"Close\"\r\n                        color=\"inherit\"\r\n                        className={this.props.classes.close}\r\n                        onClick={() => this.setState({toast: ''})}\r\n                    >\r\n                        <IconClose />\r\n                    </IconButton>,\r\n                ]}\r\n            />);\r\n    }\r\n\r\n    renderHint() {\r\n        if (this.state.showHint) {\r\n            return <Message text={I18n.t('Click now Get new connection certificates to request new temporary password')} onClose={() => this.setState({showHint: false})}/>;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.alive) {\r\n            return <p>{I18n.t('Please start the instance first!')}</p>;\r\n        }\r\n\r\n        let data = Object.values(this.state.telemetryObjects).map(object => {\r\n            const custom = object.common.custom ? object.common.custom[this.props.adapterName + '.' + this.props.instance] : {};\r\n            return {\r\n                id: object._id,\r\n                name: object.common.name,\r\n                type: object.common.role,\r\n                debounce: custom.debounce ? custom.debounce : this.props.native[object.common.role + '_debounce'],\r\n                ignore: custom.ignore ? custom.ignore : 0,\r\n                lastEvent: custom.lastEvent ? moment(custom.lastEvent).format('YYYY-MM-DD HH:mm:ss') : null,\r\n                eventsInHour: custom.eventsInHour ? custom.eventsInHour.length : null,\r\n            }\r\n        });\r\n        console.log(data);\r\n        return <TreeTable\r\n            data={data}\r\n            columns={columns}\r\n            onUpdate={this.props.updateTelemetryObject}\r\n        />;\r\n    }\r\n}\r\n\r\nObjects.propTypes = {\r\n    common: PropTypes.object.isRequired,\r\n    native: PropTypes.object.isRequired,\r\n    instance: PropTypes.number.isRequired,\r\n    theme: PropTypes.object.isRequired,\r\n    themeType: PropTypes.string,\r\n    adapterName: PropTypes.string.isRequired,\r\n    onError: PropTypes.func,\r\n    socket: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(Objects);\r\n","import React from 'react';\r\nimport {MuiThemeProvider, withStyles} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport GenericApp from '@iobroker/adapter-react/GenericApp';\r\nimport Loader from '@iobroker/adapter-react/Components/Loader'\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport TabOptions from './Tabs/Options';\r\nimport TabObjects from './Tabs/Objects';\r\n\r\nconst styles = theme => ({\r\n    root: {},\r\n    tabContent: {\r\n        padding: 10,\r\n        height: 'calc(100% - 64px - 48px - 20px)',\r\n        overflow: 'auto'\r\n    },\r\n    tabContentIFrame: {\r\n        padding: 10,\r\n        height: 'calc(100% - 64px - 48px - 20px - 38px)',\r\n        overflow: 'auto'\r\n    }\r\n});\r\n\r\nconst roles = [\r\n    'sensor.motion',\r\n    'sensor.rain',\r\n    'sensor.lock',\r\n    'button.*',\r\n    'value.window',\r\n    'value.temperature',\r\n    'level.temperature',\r\n    'value.humidity',\r\n    'value.blood.sugar',\r\n    'level.co2',\r\n    'level.co2',\r\n    'value.health.*'\r\n];\r\n\r\nclass App extends GenericApp {\r\n    constructor(props) {\r\n        const extendedProps = {};\r\n        extendedProps.translations = {\r\n            'en': require('./i18n/en'),\r\n            'de': require('./i18n/de'),\r\n            'ru': require('./i18n/ru'),\r\n            'pt': require('./i18n/pt'),\r\n            'nl': require('./i18n/nl'),\r\n            'fr': require('./i18n/fr'),\r\n            'it': require('./i18n/it'),\r\n            'es': require('./i18n/es'),\r\n            'pl': require('./i18n/pl'),\r\n            'zh-cn': require('./i18n/zh-cn'),\r\n        };\r\n        extendedProps.doNotLoadAllObjects = true;\r\n        extendedProps.adapterName = 'telemetry';\r\n\r\n        super(props, extendedProps);\r\n    }\r\n\r\n    getSelectedTab() {\r\n        const tab = this.state.selectedTab;\r\n        if (!tab || tab === 'undefined' || tab === 'options') {\r\n            return 0;\r\n        } else\r\n        if (tab === 'objects') {\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    /*async onPrepareLoad(adapterSettings) {\r\n        let settings = await this.socket.getObject('telemetry.0.settings');\r\n\r\n        let telemetryObjects = {};\r\n        if (settings) {\r\n            for (let i in settings.native.telemetryObjects) {\r\n                let _id = settings.native.telemetryObjects[i];\r\n                telemetryObjects[_id] = await this.socket.getObject(_id);\r\n            }\r\n        }\r\n        this.setState({telemetryObjects});\r\n    }\r\n\r\n    onPrepareSave() {\r\n        Object.keys(this.state.telemetryObjects).forEach(_id =>\r\n            this.socket.setObject(_id, this.state.telemetryObjects[_id])\r\n        );\r\n\r\n    updateTelemetryObject = (data) => {\r\n        let newObjects = JSON.parse(JSON.stringify(this.state.telemetryObjects));\r\n        newObjects[data.id].common.custom['telemetry.0'].ignore = data.ignore;\r\n        newObjects[data.id].common.custom['telemetry.0'].debounce = data.debounce;\r\n        this.setState({telemetryObjects: newObjects, changed: true});\r\n    }*/\r\n\r\n    render() {\r\n        if (!this.state.loaded) {\r\n            return <MuiThemeProvider theme={this.state.theme}>\r\n                <Loader theme={this.state.themeType}/>\r\n            </MuiThemeProvider>;\r\n        }\r\n\r\n        return <MuiThemeProvider theme={this.state.theme}>\r\n            <div className=\"App\" style={{background: this.state.themeType === 'dark' ? '#000' : '#FFF'}}>\r\n                <AppBar position=\"static\">\r\n\r\n                    <Tabs value={this.getSelectedTab()} onChange={(e, index) => this.selectTab(e.target.parentNode.dataset.name, index)}>\r\n                        <Tab label={I18n.t('Options')} data-name=\"options\" />\r\n                        <Tab label={I18n.t('Objects')}  data-name=\"objects\" />\r\n                        {/*this.state.selectedTab === 'objects' ? <IconButton onClick={() => this.onPrepareLoad(this.state.native)}>\r\n                            <RefreshIcon htmlColor=\"white\"/>\r\n                        </IconButton> : null*/}\r\n                    </Tabs>\r\n                </AppBar>\r\n\r\n                <div className={this.isIFrame ? this.props.classes.tabContentIFrame : this.props.classes.tabContent}>\r\n                    {(this.state.selectedTab === 'options' || !this.state.selectedTab) && (<TabOptions\r\n                        key=\"options\"\r\n                        common={this.common}\r\n                        socket={this.socket}\r\n                        native={this.state.native}\r\n                        theme={this.state.themeType}\r\n                        onError={text => this.setState({errorText: text})}\r\n                        instance={this.instance}\r\n                        adapterName={this.adapterName}\r\n                        onChange={(attr, value, cb) => this.updateNativeValue(attr, value, cb)}\r\n                        roles={roles}\r\n                    />)}\r\n                    {this.state.selectedTab === 'objects' && <TabObjects\r\n                        key=\"objects\"\r\n                        common={this.common}\r\n                        socket={this.socket}\r\n                        themeType={this.state.themeType}\r\n                        theme={this.state.theme}\r\n                        onError={text => this.setState({errorText: text})}\r\n                        instance={this.instance}\r\n                        adapterName={this.adapterName}\r\n                    />}\r\n                </div>\r\n                {this.renderError()}\r\n                {this.renderSaveCloseButtons()}\r\n            </div>\r\n        </MuiThemeProvider>;\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as Sentry from '@sentry/browser';\r\nimport * as SentryIntegrations from '@sentry/integrations';\r\nimport { MuiThemeProvider} from '@material-ui/core/styles';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {version} from '../package.json';\r\nimport theme from '@iobroker/adapter-react/Theme';\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\n\r\nwindow.adapterName = 'consumption';\r\nlet themeName = Utils.getThemeName();\r\n\r\nconsole.log('iobroker.' + window.adapterName + '@' + version + ' using theme \"' + themeName + '\"');\r\n\r\nfunction build() {\r\n    return ReactDOM.render(\r\n        <MuiThemeProvider theme={theme(themeName)}>\r\n            <App common={{}}\r\n                onThemeChange={_theme => {\r\n                    themeName = _theme;\r\n                    build();\r\n                }}\r\n            />\r\n        </MuiThemeProvider>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\nif (window.location.host !== 'localhost:3000' && false) {\r\n    Sentry.init({\r\n        dsn: 'https://5ad729dbed504d15aa8bde423cae9a8e@sentry.iobroker.net/57',\r\n        release: 'iobroker.' + window.adapterName + '@' + version,\r\n        integrations: [\r\n            new SentryIntegrations.Dedupe()\r\n        ]\r\n    });\r\n}\r\n\r\nbuild();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}